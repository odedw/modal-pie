{"version":3,"sources":["utils/toRomanNumeral.js","ModesChartView/index.jsx","ModeView/index.jsx","App.js","serviceWorker.js","index.js"],"names":["toRomanNumeral","i","data","require","Container","styled","div","_templateObject","ModeTable","_templateObject2","TableCell","_templateObject3","ChordTableCell","_templateObject4","BaseRoot","input","_templateObject5","ModesChartView","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","root","handleChange","bind","assertThisInitialized","event","allowedRootNote","some","note","toUpperCase","startsWith","target","value","setState","_this2","react_default","a","createElement","dist_default","size","maxLength","placeholder","onChange","map","key","modes","mode","Fragment","data-tip","tags","join","name","chords","chord","concat","res","teoria","scale","notes","substr","replace","getChordName","Component","ModeView_templateObject","ModeNames","ModeView_templateObject2","ModeName","css","ModeView_templateObject3","h3","ModeView_templateObject4","ModeNameSeparator","ModeView_templateObject5","ModeTags","_templateObject6","ModeTag","_templateObject7","TagSeparator","_templateObject8","_templateObject9","_templateObject10","ModeView","_ref","match","find","m","params","toLowerCase","ModeView_Container","Link","to","className","length","tag","ModeView_ModeTable","ModeView_TableCell","intervals","interval","App","BrowserRouter","basename","process","Route","path","exact","component","Boolean","window","location","hostname","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.829ac72a.chunk.js","sourcesContent":["export default function(i) {\r\n  switch (i) {\r\n    case 1: return 'I';\r\n    case 2: return 'II';\r\n    case 3: return 'III';\r\n    case 4: return 'IV';\r\n    case 5: return 'V';\r\n    case 6: return 'VI';\r\n    case 7: return 'VII';\r\n    default:return '';\r\n  }\r\n}","import React, { Component } from \"react\";\r\nimport styled from \"styled-components\";\r\nimport toRomanNumeral from \"../utils/toRomanNumeral\";\r\nimport ReactTooltip from \"react-tooltip\";\r\nimport teoria from \"teoria\";\r\nconst data = require(\"../data.json\");\r\n\r\nfunction getChordName(chord, i, root, mode) {\r\n  let res = \"\";\r\n  if (!root) {\r\n    if (chord.startsWith(\"b\")) {\r\n      res += \"b\";\r\n      chord = chord.substr(1);\r\n    }\r\n    res = `${res}${toRomanNumeral(i + 1)}${chord}`;\r\n  } else {\r\n    const note = teoria.note(root);\r\n    const scale = note.scale(mode);\r\n    res = scale\r\n      .notes()\r\n      [i].chord(\r\n        chord.startsWith(\"b\") || chord.startsWith(\"#\") ? chord.substr(1) : chord\r\n      ).name;\r\n  }\r\n\r\n  return res.replace(/b/g, \"♭\").replace(/#/g, \"♯\");\r\n}\r\n\r\nconst Container = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n`;\r\nconst ModeTable = styled.div`\r\n  margin-top: 1em;\r\n  display: flex;\r\n  flex-wrap: wrap;\r\n  max-width: 60%;\r\n`;\r\n\r\nconst TableCell = styled.div`\r\n  box-sizing: border-box;\r\n  flex-grow: 1;\r\n  width: 12.5%;\r\n  padding: 0.8em 1.2em;\r\n  overflow: hidden;\r\n  border: solid 1px white;\r\n  font-size: 1rem;\r\n`;\r\n\r\nconst ChordTableCell = styled(TableCell)`\r\n  font-family: \"Times New Roman\", Times, serif;\r\n`;\r\n\r\nconst BaseRoot = styled.input`\r\n  -webkit-appearance: none;\r\n  -moz-appearance: none;\r\n  appearance: none;\r\n  background: transparent;\r\n  color: white;\r\n  border: none;\r\n  border-bottom: solid white 1px;\r\n  text-align: center;\r\n`;\r\n\r\nclass ModesChartView extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = { root: \"\" };\r\n    this.handleChange = this.handleChange.bind(this);\r\n  }\r\n  handleChange(event) {\r\n    if (\r\n      data.allowedRootNote.some(note =>\r\n        note.toUpperCase().startsWith(event.target.value.toUpperCase())\r\n      )\r\n    ) {\r\n      this.setState({ root: event.target.value });\r\n    }\r\n  }\r\n  render() {\r\n    return (\r\n      <Container>\r\n        <ReactTooltip />\r\n        <ModeTable>\r\n          <TableCell>\r\n            <BaseRoot\r\n              size=\"2\"\r\n              maxLength=\"2\"\r\n              placeholder=\"root\"\r\n              value={this.state.root}\r\n              onChange={this.handleChange}\r\n            />\r\n          </TableCell>\r\n          {[1, 2, 3, 4, 5, 6, 7].map(i => (\r\n            <TableCell key={i}>{toRomanNumeral(i)}</TableCell>\r\n          ))}\r\n\r\n          {data.modes.map(mode => (\r\n            <>\r\n              <TableCell data-tip={mode.tags.join(\", \")}>{mode.name}</TableCell>\r\n              {mode.chords.map((chord, i) => (\r\n                <ChordTableCell key={`${mode}${i}`}>\r\n                  {getChordName(chord, i, this.state.root, mode.name)}\r\n                </ChordTableCell>\r\n              ))}\r\n            </>\r\n          ))}\r\n        </ModeTable>\r\n      </Container>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ModesChartView;\r\n","import React from \"react\";\r\nimport styled, { css } from \"styled-components\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nconst modes = require(\"../data.json\").modes;\r\n\r\nconst Container = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n`;\r\nconst ModeNames = styled.div`\r\n  display: flex;\r\n  flex-direction: row;\r\n  align-items: center;\r\n  color: #555;\r\n`;\r\nconst modeNameClass = css`\r\n  text-decoration: none;\r\n`;\r\nconst ModeName = styled.h3`\r\n  text-transform: capitalize;\r\n  color: #555;\r\n  margin: 0 !important;\r\n\r\n  &.selected {\r\n    color: white;\r\n  }\r\n`;\r\nconst ModeNameSeparator = styled.div`\r\n  padding: 0 0.5em;\r\n`;\r\nconst ModeTags = styled.div`\r\n  display: flex;\r\n  flex-direction: row;\r\n`;\r\nconst ModeTag = styled.div``;\r\nconst TagSeparator = styled.div`\r\n  padding: 0 5px;\r\n`;\r\nconst ModeTable = styled.div`\r\n  margin-top: 1em;\r\n  display: flex;\r\n  flex-wrap: wrap;\r\n  max-width: 80%;\r\n`;\r\n\r\nconst TableCell = styled.div`\r\n  box-sizing: border-box;\r\n  flex-grow: 1;\r\n  width: 12.5%;\r\n  padding: 0.8em 1.2em;\r\n  overflow: hidden;\r\n  border: solid 1px white;\r\n`;\r\n\r\nconst ModeView = ({ match }) => {\r\n  const mode = modes.find(m => m.name === match.params.name.toLowerCase());\r\n  return (\r\n    <Container>\r\n      <ModeNames>\r\n        {modes\r\n          .map(m => m.name)\r\n          .map((name, i) => (\r\n            <>\r\n              <Link to={`/${name}`}>\r\n                <ModeName\r\n                  className={name === match.params.name ? \"selected\" : \"\"}\r\n                >\r\n                  <h3>{name}</h3>\r\n                </ModeName>\r\n              </Link>\r\n              {i === modes.length - 1 ? null : (\r\n                <ModeNameSeparator>/</ModeNameSeparator>\r\n              )}\r\n            </>\r\n          ))}\r\n      </ModeNames>\r\n      <ModeTags>\r\n        {mode.tags.map((tag, i) => (\r\n          <>\r\n            <ModeTag>{tag}</ModeTag>\r\n            {i === mode.tags.length - 1 ? null : <TagSeparator>•</TagSeparator>}\r\n          </>\r\n        ))}\r\n      </ModeTags>\r\n      <ModeTable>\r\n        <TableCell />\r\n        <TableCell>I</TableCell>\r\n        <TableCell>II</TableCell>\r\n        <TableCell>III</TableCell>\r\n        <TableCell>IV</TableCell>\r\n        <TableCell>V</TableCell>\r\n        <TableCell>VI</TableCell>\r\n        <TableCell>VII</TableCell>\r\n\r\n        <TableCell>Notes</TableCell>\r\n        {mode.intervals.map(interval => (\r\n          <TableCell>{interval.toUpperCase()}</TableCell>\r\n        ))}\r\n\r\n        <TableCell>Chords</TableCell>\r\n        {mode.chords.map(chord => (\r\n          <TableCell>{chord}</TableCell>\r\n        ))}\r\n      </ModeTable>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default ModeView;\r\n","import React, { Component } from \"react\";\r\nimport \"./App.css\";\r\nimport ModesChartView from \"./ModesChartView\";\r\nimport ModeView from \"./ModeView\";\r\nimport { BrowserRouter as Router, Route } from \"react-router-dom\";\r\n\r\nclass App extends Component {\r\n  render() {\r\n    return (\r\n      <Router basename={process.env.PUBLIC_URL}>\r\n        <div className=\"App\">\r\n          <header className=\"App-header\">\r\n            <Route path='/' exact component={ModesChartView} />\r\n            <Route path='/:name' component={ModeView} />\r\n          </header>\r\n        </div>\r\n      </Router>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}