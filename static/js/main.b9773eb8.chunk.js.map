{"version":3,"sources":["ModesChartView/index.jsx","ModeView/index.jsx","App.js","serviceWorker.js","index.js"],"names":["ModesChartView","react_default","a","createElement","Component","modes","require","Container","styled","div","_templateObject","ModeNames","_templateObject2","ModeName","css","_templateObject3","h3","_templateObject4","ModeNameSeparator","_templateObject5","ModeTags","_templateObject6","ModeTag","_templateObject7","TagSeparator","_templateObject8","ModeTable","_templateObject9","TableCell","_templateObject10","ModeView","_ref","match","mode","find","m","name","params","toLowerCase","map","i","Fragment","Link","to","concat","className","length","tags","tag","intervals","interval","toUpperCase","chords","chord","App","BrowserRouter","Route","path","process","exact","component","Boolean","window","location","hostname","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.b9773eb8.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\n\r\nclass ModesChartView extends Component {\r\n  render() {\r\n    return <div>Modes chart view</div>;\r\n  }\r\n}\r\n\r\nexport default ModesChartView;\r\n","import React from \"react\";\r\nimport styled, { css } from \"styled-components\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nconst modes = require(\"../modes.json\");\r\n\r\nconst Container = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n`;\r\nconst ModeNames = styled.div`\r\n  display: flex;\r\n  flex-direction: row;\r\n  align-items: center;\r\n  color: #555;\r\n`;\r\nconst modeNameClass = css`\r\n  text-decoration: none;\r\n`;\r\nconst ModeName = styled.h3`\r\n  text-transform: capitalize;\r\n  color: #555;\r\n  margin: 0 !important;\r\n\r\n  &.selected {\r\n    color: white;\r\n  }\r\n`;\r\nconst ModeNameSeparator = styled.div`\r\n  padding: 0 0.5em;\r\n`;\r\nconst ModeTags = styled.div`\r\n  display: flex;\r\n  flex-direction: row;\r\n`;\r\nconst ModeTag = styled.div``;\r\nconst TagSeparator = styled.div`\r\n  padding: 0 5px;\r\n`;\r\nconst ModeTable = styled.div`\r\n  margin-top: 1em;\r\n  display: flex;\r\n  flex-wrap: wrap;\r\n  max-width: 80%;\r\n`;\r\n\r\nconst TableCell = styled.div`\r\n  box-sizing: border-box;\r\n  flex-grow: 1;\r\n  width: 12.5%;\r\n  padding: 0.8em 1.2em;\r\n  overflow: hidden;\r\n  border: solid 1px white;\r\n`;\r\n\r\nconst ModeView = ({ match }) => {\r\n  const mode = modes.find(m => m.name === match.params.name.toLowerCase());\r\n  return (\r\n    <Container>\r\n      <ModeNames>\r\n        {modes.map(m => m.name).map((name, i) => (\r\n          <>\r\n            <Link to={`/${name}`}>\r\n              <ModeName\r\n                className={name === match.params.name ? \"selected\" : \"\"}\r\n              >\r\n                <h3>{name}</h3>\r\n              </ModeName>\r\n            </Link>\r\n            {i === modes.length - 1 ? null : (\r\n              <ModeNameSeparator>/</ModeNameSeparator>\r\n            )}\r\n          </>\r\n        ))}\r\n      </ModeNames>\r\n      <ModeTags>\r\n        {mode.tags.map((tag, i) => (\r\n          <>\r\n            <ModeTag>{tag}</ModeTag>\r\n            {i === mode.tags.length - 1 ? null : <TagSeparator>â€¢</TagSeparator>}\r\n          </>\r\n        ))}\r\n      </ModeTags>\r\n      <ModeTable>\r\n        <TableCell />\r\n        <TableCell>I</TableCell>\r\n        <TableCell>II</TableCell>\r\n        <TableCell>III</TableCell>\r\n        <TableCell>IV</TableCell>\r\n        <TableCell>V</TableCell>\r\n        <TableCell>VI</TableCell>\r\n        <TableCell>VII</TableCell>\r\n\r\n        <TableCell>Notes</TableCell>\r\n        {mode.intervals.map(interval => (\r\n          <TableCell>{interval.toUpperCase()}</TableCell>\r\n        ))}\r\n\r\n        <TableCell>Chords</TableCell>\r\n        {mode.chords.map(chord => (\r\n          <TableCell>{chord}</TableCell>\r\n        ))}\r\n      </ModeTable>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default ModeView;\r\n","import React, { Component } from \"react\";\r\nimport \"./App.css\";\r\nimport ModesChartView from \"./ModesChartView\";\r\nimport ModeView from \"./ModeView\";\r\nimport { BrowserRouter as Router, Route, Link } from \"react-router-dom\";\r\n\r\nclass App extends Component {\r\n  render() {\r\n    return (\r\n      <Router>\r\n        <div className=\"App\">\r\n          <header className=\"App-header\">\r\n            <Route path={process.env.PUBLIC_URL + '/'} exact component={ModesChartView} />\r\n            <Route path={process.env.PUBLIC_URL + '/:name'} component={ModeView} />\r\n          </header>\r\n        </div>\r\n      </Router>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}