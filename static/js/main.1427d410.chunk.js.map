{"version":3,"sources":["ModesChartView/index.jsx","ModeView/index.jsx","App.js","serviceWorker.js","index.js"],"names":["ModesChartView","react_default","a","createElement","Component","modes","require","Container","styled","div","_templateObject","ModeNames","_templateObject2","ModeName","css","_templateObject3","h3","_templateObject4","ModeNameSeparator","_templateObject5","ModeTags","_templateObject6","ModeTag","_templateObject7","TagSeparator","_templateObject8","ModeTable","_templateObject9","TableCell","_templateObject10","ModeView","_ref","match","mode","find","m","name","params","toLowerCase","map","i","Fragment","Link","to","concat","className","length","tags","tag","intervals","interval","toUpperCase","chords","chord","App","BrowserRouter","basename","process","Route","path","exact","component","Boolean","window","location","hostname","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.1427d410.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\n\r\nclass ModesChartView extends Component {\r\n  render() {\r\n    return <div>Modes chart view</div>;\r\n  }\r\n}\r\n\r\nexport default ModesChartView;\r\n","import React from \"react\";\r\nimport styled, { css } from \"styled-components\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nconst modes = require(\"../modes.json\");\r\n\r\nconst Container = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n`;\r\nconst ModeNames = styled.div`\r\n  display: flex;\r\n  flex-direction: row;\r\n  align-items: center;\r\n  color: #555;\r\n`;\r\nconst modeNameClass = css`\r\n  text-decoration: none;\r\n`;\r\nconst ModeName = styled.h3`\r\n  text-transform: capitalize;\r\n  color: #555;\r\n  margin: 0 !important;\r\n\r\n  &.selected {\r\n    color: white;\r\n  }\r\n`;\r\nconst ModeNameSeparator = styled.div`\r\n  padding: 0 0.5em;\r\n`;\r\nconst ModeTags = styled.div`\r\n  display: flex;\r\n  flex-direction: row;\r\n`;\r\nconst ModeTag = styled.div``;\r\nconst TagSeparator = styled.div`\r\n  padding: 0 5px;\r\n`;\r\nconst ModeTable = styled.div`\r\n  margin-top: 1em;\r\n  display: flex;\r\n  flex-wrap: wrap;\r\n  max-width: 80%;\r\n`;\r\n\r\nconst TableCell = styled.div`\r\n  box-sizing: border-box;\r\n  flex-grow: 1;\r\n  width: 12.5%;\r\n  padding: 0.8em 1.2em;\r\n  overflow: hidden;\r\n  border: solid 1px white;\r\n`;\r\n\r\nconst ModeView = ({ match }) => {\r\n  const mode = modes.find(m => m.name === match.params.name.toLowerCase());\r\n  return (\r\n    <Container>\r\n      <ModeNames>\r\n        {modes.map(m => m.name).map((name, i) => (\r\n          <>\r\n            <Link to={`/${name}`}>\r\n              <ModeName\r\n                className={name === match.params.name ? \"selected\" : \"\"}\r\n              >\r\n                <h3>{name}</h3>\r\n              </ModeName>\r\n            </Link>\r\n            {i === modes.length - 1 ? null : (\r\n              <ModeNameSeparator>/</ModeNameSeparator>\r\n            )}\r\n          </>\r\n        ))}\r\n      </ModeNames>\r\n      <ModeTags>\r\n        {mode.tags.map((tag, i) => (\r\n          <>\r\n            <ModeTag>{tag}</ModeTag>\r\n            {i === mode.tags.length - 1 ? null : <TagSeparator>â€¢</TagSeparator>}\r\n          </>\r\n        ))}\r\n      </ModeTags>\r\n      <ModeTable>\r\n        <TableCell />\r\n        <TableCell>I</TableCell>\r\n        <TableCell>II</TableCell>\r\n        <TableCell>III</TableCell>\r\n        <TableCell>IV</TableCell>\r\n        <TableCell>V</TableCell>\r\n        <TableCell>VI</TableCell>\r\n        <TableCell>VII</TableCell>\r\n\r\n        <TableCell>Notes</TableCell>\r\n        {mode.intervals.map(interval => (\r\n          <TableCell>{interval.toUpperCase()}</TableCell>\r\n        ))}\r\n\r\n        <TableCell>Chords</TableCell>\r\n        {mode.chords.map(chord => (\r\n          <TableCell>{chord}</TableCell>\r\n        ))}\r\n      </ModeTable>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default ModeView;\r\n","import React, { Component } from \"react\";\r\nimport \"./App.css\";\r\nimport ModesChartView from \"./ModesChartView\";\r\nimport ModeView from \"./ModeView\";\r\nimport { BrowserRouter as Router, Route } from \"react-router-dom\";\r\n\r\nclass App extends Component {\r\n  render() {\r\n    return (\r\n      <Router basename={process.env.PUBLIC_URL}>\r\n        <div className=\"App\">\r\n          <header className=\"App-header\">\r\n            <Route path='/' exact component={ModesChartView} />\r\n            <Route path='/:name' component={ModeView} />\r\n          </header>\r\n        </div>\r\n      </Router>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}